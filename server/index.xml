<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Server on Orbit</title>
    <link>/orbit/server/</link>
    <description>Recent content in Server on Orbit</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    
	<atom:link href="/orbit/server/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Server Configuration</title>
      <link>/orbit/server/configuration/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/orbit/server/configuration/</guid>
      <description>Orbit Server offers extensive configuration and an extension model to support many situations outside the defaults. The OrbitServerConfig class supplied to the OrbitServer constructor has overrides for lease timing, process management, addressable and node storage, and metrics.
The OrbitServerConfig class is well documented and will be the authoritative source for the latest options. Some settings, like the pipelineBufferCount is a simple Int type. Others, like the addressableLeaseDuration are more complex objects.</description>
    </item>
    
    <item>
      <title>Hosting Orbit Server</title>
      <link>/orbit/server/hosting/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/orbit/server/hosting/</guid>
      <description>Almost any scenario can be handled by using the prepackaged Orbit Server. For scenarios where the developer needs extensive control over the server, Orbit functionality can be hosted within a custom application.
Describe taking a reference to orbit-server, starting an instance. Role of orbit-application.
Gradle:
implementation(&amp;#34;cloud.orbit:orbit-server:2.0.0-alpha.103&amp;#34;) To instantiate an OrbitServer:
import kotlinx.coroutines.runBlocking import orbit.server.OrbitServerConfig import orbit.server.OrbitServer fun main() { runBlocking { val server = OrbitServer(OrbitServerConfig( ... configuration )) server.start().join() } } OrbitServerConfig The OrbitServerConfig class can be used to make changes to server configurations, including things like lease times, persistence technology, resource limitations, and metrics.</description>
    </item>
    
  </channel>
</rss>